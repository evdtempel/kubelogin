name: Release
on:
  workflow_dispatch:

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    env:
      GO111MODULE: on
    steps:
    - name: Set up Go 1.19
      uses: actions/setup-go@v3
      with:
        go-version: 1.19
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v3

    # Read changelog and read versions etc.
    - name: Check version is mentioned in Changelog.md
      id: changelog_reader
      uses: mindsers/changelog-reader-action@v2
      with:
        validation_depth: 10
        path: 'CHANGELOG.md'
    # Check if the newest tag already exists
    - name: Check if tag exist
      uses: mukunku/tag-exists-action@5dfe2bf779fe5259360bb10b2041676713dcc8a3 # v1.1.0
      id: check-tag-exists
      with:
        tag:  "v${{ steps.changelog_reader.outputs.version }} release" # following the pattern of vx.x.xx release used in this repo
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    # Create Release with artifacts
    - name: Create Kubelogin Release
      id: create_release
      if: ${{ steps.check-tag-exists.outputs.exists == 'false'}}
      uses: softprops/action-gh-release@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name : "v${{ steps.changelog_reader.outputs.version }}"
        name: "v${{ steps.changelog_reader.outputs.version }} release" # following the pattern of vx.x.xx release used in this repo
        body: ${{ steps.changelog_reader.outputs.changes }}

    # We need the latest tag in the git local workspace before it start building. 
    - name: Get tags
      run: git fetch --tags

    - name: Build (linux)
      env:
        GOOS: linux
        GOARCH: amd64
      run: make

    - name: Zip (linux-amd64)
      uses: montudor/action-zip@v1
      with:
        args: zip -qq kubelogin-linux-amd64.zip bin/linux_amd64/kubelogin

    - name: Create sha256 Checksums
      run: |
        sha256sum kubelogin-linux-amd64.zip > kubelogin-linux-amd64.zip.sha256

    - name: Publish
      uses: skx/github-action-publish-binaries@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        args: kubelogin-linux-amd64.zip kubelogin-linux-amd64.zip.sha256
        releaseId: ${{ steps.create_release.outputs.id }}
